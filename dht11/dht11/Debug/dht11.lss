
dht11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e4  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 01 01 	call	0x202	; 0x202 <main>
  64:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z7initDHTv>:
}

void initDHT(void)
{
    /* Set LED as output */
    SET_BIT(DDRB,LED);
  6c:	bc 9a       	sbi	0x17, 4	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f ef       	ldi	r18, 0xFF	; 255
  70:	83 ed       	ldi	r24, 0xD3	; 211
  72:	90 e3       	ldi	r25, 0x30	; 48
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <_Z7initDHTv+0x8>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z7initDHTv+0x12>
  7e:	00 00       	nop
  80:	08 95       	ret

00000082 <_Z9fetchDataPh>:
    _delay_ms(2000);
}


uint8_t fetchData(uint8_t* arr)
{
  82:	8f 92       	push	r8
  84:	9f 92       	push	r9
  86:	af 92       	push	r10
  88:	bf 92       	push	r11
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <_Z9fetchDataPh+0x1a>
  9c:	00 d0       	rcall	.+0      	; 0x9e <_Z9fetchDataPh+0x1c>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
    int8_t i,j;
    
    /******************* Sensor communication start *******************/
    
    /* Set data pin as output first */
    SET_BIT(DDRB,DHT_PIN);
  a4:	bb 9a       	sbi	0x17, 3	; 23
    
    /* First we need milliseconds delay, so set clk/1024 prescaler */
    TCCR1B = 0x05;
  a6:	25 e0       	ldi	r18, 0x05	; 5
  a8:	2e bd       	out	0x2e, r18	; 46
    
    TCNT1 = 0;
  aa:	1d bc       	out	0x2d, r1	; 45
  ac:	1c bc       	out	0x2c, r1	; 44
    
    /* Clear bit for 20 ms */
    CLEAR_BIT(DHT_PORT_OUT,DHT_PIN);
  ae:	c3 98       	cbi	0x18, 3	; 24
    
    /* Wait about 20 ms */
    while(TCNT1 < 160);
  b0:	2c b5       	in	r18, 0x2c	; 44
  b2:	3d b5       	in	r19, 0x2d	; 45
  b4:	20 3a       	cpi	r18, 0xA0	; 160
  b6:	31 05       	cpc	r19, r1
  b8:	d8 f3       	brcs	.-10     	; 0xb0 <_Z9fetchDataPh+0x2e>
    
    /* Now set Timer0 with clk/8 prescaling.
     Gives 1탎 per cycle @8Mhz */
    TCCR1B = 0x02;
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	2e bd       	out	0x2e, r18	; 46
    
    TCNT1 = 0;
  be:	1d bc       	out	0x2d, r1	; 45
  c0:	1c bc       	out	0x2c, r1	; 44
    
    /* Pull high again */
    SET_BIT(DHT_PORT_OUT,DHT_PIN);
  c2:	c3 9a       	sbi	0x18, 3	; 24
    
    /* And set data pin as input */
    CLEAR_BIT(DDRB,DHT_PIN);
  c4:	bb 98       	cbi	0x17, 3	; 23
    
    /* Wait for response from sensor, 20-40탎 according to datasheet */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
  c6:	b3 9b       	sbis	0x16, 3	; 22
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <_Z9fetchDataPh+0x54>
    { if (TCNT1 >= 60) return 0; }
  ca:	2c b5       	in	r18, 0x2c	; 44
  cc:	3d b5       	in	r19, 0x2d	; 45
  ce:	2c 33       	cpi	r18, 0x3C	; 60
  d0:	31 05       	cpc	r19, r1
  d2:	c8 f3       	brcs	.-14     	; 0xc6 <_Z9fetchDataPh+0x44>
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <_Z9fetchDataPh+0x142>
    
    /************************* Sensor preamble *************************/
    
    TCNT1 = 0;
  d6:	1d bc       	out	0x2d, r1	; 45
  d8:	1c bc       	out	0x2c, r1	; 44
    
    /* Now wait for the first response to finish, low ~80탎 */
    while(!IS_SET(DHT_PORT_IN,DHT_PIN))
  da:	b3 99       	sbic	0x16, 3	; 22
  dc:	06 c0       	rjmp	.+12     	; 0xea <_Z9fetchDataPh+0x68>
    { if (TCNT1 >= 100) return 0; }
  de:	2c b5       	in	r18, 0x2c	; 44
  e0:	3d b5       	in	r19, 0x2d	; 45
  e2:	24 36       	cpi	r18, 0x64	; 100
  e4:	31 05       	cpc	r19, r1
  e6:	c8 f3       	brcs	.-14     	; 0xda <_Z9fetchDataPh+0x58>
  e8:	6f c0       	rjmp	.+222    	; 0x1c8 <_Z9fetchDataPh+0x146>
    
    TCNT1 = 0;
  ea:	1d bc       	out	0x2d, r1	; 45
  ec:	1c bc       	out	0x2c, r1	; 44
    
    /* Then wait for the second response to finish, high ~80탎 */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
  ee:	b3 9b       	sbis	0x16, 3	; 22
  f0:	06 c0       	rjmp	.+12     	; 0xfe <_Z9fetchDataPh+0x7c>
    { if (TCNT1 >= 100) return 0; }
  f2:	2c b5       	in	r18, 0x2c	; 44
  f4:	3d b5       	in	r19, 0x2d	; 45
  f6:	24 36       	cpi	r18, 0x64	; 100
  f8:	31 05       	cpc	r19, r1
  fa:	c8 f3       	brcs	.-14     	; 0xee <_Z9fetchDataPh+0x6c>
  fc:	67 c0       	rjmp	.+206    	; 0x1cc <_Z9fetchDataPh+0x14a>
  fe:	fe 01       	movw	r30, r28
 100:	31 96       	adiw	r30, 0x01	; 1
 102:	be 01       	movw	r22, r28
 104:	6a 5f       	subi	r22, 0xFA	; 250
 106:	7f 4f       	sbci	r23, 0xFF	; 255
    { if (TCNT1 >= 100) return 0; }
    
    TCNT1 = 0;
    
    /* Then wait for the second response to finish, high ~80탎 */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
 108:	df 01       	movw	r26, r30
            
            if (cnt >= 20 && cnt <= 35)
            { CLEAR_BIT(data[i],j); }
            
            else if (cnt >= 60 && cnt <= 80)
            { SET_BIT(data[i],j); }
 10a:	c1 2c       	mov	r12, r1
 10c:	d1 2c       	mov	r13, r1
 10e:	76 01       	movw	r14, r12
 110:	c3 94       	inc	r12
    { if (TCNT1 >= 100) return 0; }
    
    TCNT1 = 0;
    
    /* Then wait for the second response to finish, high ~80탎 */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
 112:	47 e0       	ldi	r20, 0x07	; 7
 114:	50 e0       	ldi	r21, 0x00	; 0
    
    for (i = 0; i < 5; ++i)
    {
        for(j = 7; j >= 0; --j)
        {
            TCNT1 = 0;
 116:	1d bc       	out	0x2d, r1	; 45
 118:	1c bc       	out	0x2c, r1	; 44
            
            /* First there is always a 50탎 low period */
            while(!IS_SET(DHT_PORT_IN,DHT_PIN))
 11a:	b3 99       	sbic	0x16, 3	; 22
 11c:	06 c0       	rjmp	.+12     	; 0x12a <_Z9fetchDataPh+0xa8>
            { if (TCNT1 >= 70) return 0; }
 11e:	2c b5       	in	r18, 0x2c	; 44
 120:	3d b5       	in	r19, 0x2d	; 45
 122:	26 34       	cpi	r18, 0x46	; 70
 124:	31 05       	cpc	r19, r1
 126:	c8 f3       	brcs	.-14     	; 0x11a <_Z9fetchDataPh+0x98>
 128:	53 c0       	rjmp	.+166    	; 0x1d0 <_Z9fetchDataPh+0x14e>
            
            TCNT1 = 0;
 12a:	1d bc       	out	0x2d, r1	; 45
 12c:	1c bc       	out	0x2c, r1	; 44
            
            /* Then the data signal is sent. 26 to 28탎 (ideally)
             indicate a low bit, and around 70탎 a high bit */
            while(IS_SET(DHT_PORT_IN,DHT_PIN))
 12e:	b3 9b       	sbis	0x16, 3	; 22
 130:	06 c0       	rjmp	.+12     	; 0x13e <_Z9fetchDataPh+0xbc>
            { if (TCNT1 >= 90) return 0; }
 132:	2c b5       	in	r18, 0x2c	; 44
 134:	3d b5       	in	r19, 0x2d	; 45
 136:	2a 35       	cpi	r18, 0x5A	; 90
 138:	31 05       	cpc	r19, r1
 13a:	c8 f3       	brcs	.-14     	; 0x12e <_Z9fetchDataPh+0xac>
 13c:	4b c0       	rjmp	.+150    	; 0x1d4 <_Z9fetchDataPh+0x152>
            
            /* Store the value now so that the whole checking doesn't
             move the TCNT0 forward by too much to make the data look
             bad */
            cnt = TCNT1;
 13e:	2c b5       	in	r18, 0x2c	; 44
 140:	3d b5       	in	r19, 0x2d	; 45
            
            if (cnt >= 20 && cnt <= 35)
 142:	1c ee       	ldi	r17, 0xEC	; 236
 144:	12 0f       	add	r17, r18
 146:	10 31       	cpi	r17, 0x10	; 16
 148:	78 f4       	brcc	.+30     	; 0x168 <_Z9fetchDataPh+0xe6>
            { CLEAR_BIT(data[i],j); }
 14a:	97 01       	movw	r18, r14
 14c:	86 01       	movw	r16, r12
 14e:	04 2e       	mov	r0, r20
 150:	04 c0       	rjmp	.+8      	; 0x15a <_Z9fetchDataPh+0xd8>
 152:	00 0f       	add	r16, r16
 154:	11 1f       	adc	r17, r17
 156:	22 1f       	adc	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	0a 94       	dec	r0
 15c:	d2 f7       	brpl	.-12     	; 0x152 <_Z9fetchDataPh+0xd0>
 15e:	00 95       	com	r16
 160:	2c 91       	ld	r18, X
 162:	02 23       	and	r16, r18
 164:	0c 93       	st	X, r16
 166:	10 c0       	rjmp	.+32     	; 0x188 <_Z9fetchDataPh+0x106>
            
            else if (cnt >= 60 && cnt <= 80)
 168:	2c 53       	subi	r18, 0x3C	; 60
 16a:	25 31       	cpi	r18, 0x15	; 21
 16c:	a8 f5       	brcc	.+106    	; 0x1d8 <_Z9fetchDataPh+0x156>
            { SET_BIT(data[i],j); }
 16e:	2c 91       	ld	r18, X
 170:	46 01       	movw	r8, r12
 172:	57 01       	movw	r10, r14
 174:	04 2e       	mov	r0, r20
 176:	04 c0       	rjmp	.+8      	; 0x180 <_Z9fetchDataPh+0xfe>
 178:	88 0c       	add	r8, r8
 17a:	99 1c       	adc	r9, r9
 17c:	aa 1c       	adc	r10, r10
 17e:	bb 1c       	adc	r11, r11
 180:	0a 94       	dec	r0
 182:	d2 f7       	brpl	.-12     	; 0x178 <_Z9fetchDataPh+0xf6>
 184:	28 29       	or	r18, r8
 186:	2c 93       	st	X, r18
 188:	41 50       	subi	r20, 0x01	; 1
 18a:	51 09       	sbc	r21, r1
 18c:	20 f6       	brcc	.-120    	; 0x116 <_Z9fetchDataPh+0x94>
 18e:	11 96       	adiw	r26, 0x01	; 1
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
    { if (TCNT1 >= 100) return 0; }
    
    /********************* Data transmission start **********************/
    
    for (i = 0; i < 5; ++i)
 190:	a6 17       	cp	r26, r22
 192:	b7 07       	cpc	r27, r23
 194:	09 f0       	breq	.+2      	; 0x198 <_Z9fetchDataPh+0x116>
 196:	bd cf       	rjmp	.-134    	; 0x112 <_Z9fetchDataPh+0x90>
    
    /********************* Sensor communication end *********************/
    
    check = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
    
    if (check != data[4]) return 0;
 198:	39 81       	ldd	r19, Y+1	; 0x01
 19a:	2a 81       	ldd	r18, Y+2	; 0x02
 19c:	32 0f       	add	r19, r18
 19e:	2b 81       	ldd	r18, Y+3	; 0x03
 1a0:	32 0f       	add	r19, r18
 1a2:	2c 81       	ldd	r18, Y+4	; 0x04
 1a4:	23 0f       	add	r18, r19
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	23 13       	cpse	r18, r19
 1aa:	18 c0       	rjmp	.+48     	; 0x1dc <_Z9fetchDataPh+0x15a>
 1ac:	a8 2f       	mov	r26, r24
 1ae:	b9 2f       	mov	r27, r25
 1b0:	9e 01       	movw	r18, r28
 1b2:	2b 5f       	subi	r18, 0xFB	; 251
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
    
    for(i = 0; i < 4; ++i)
    { arr[i] = data[i]; }
 1b6:	81 91       	ld	r24, Z+
 1b8:	8d 93       	st	X+, r24
    
    check = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
    
    if (check != data[4]) return 0;
    
    for(i = 0; i < 4; ++i)
 1ba:	2e 17       	cp	r18, r30
 1bc:	3f 07       	cpc	r19, r31
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <_Z9fetchDataPh+0x134>
    { arr[i] = data[i]; }
    
    return 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0d c0       	rjmp	.+26     	; 0x1de <_Z9fetchDataPh+0x15c>
    /* And set data pin as input */
    CLEAR_BIT(DDRB,DHT_PIN);
    
    /* Wait for response from sensor, 20-40탎 according to datasheet */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
    { if (TCNT1 >= 60) return 0; }
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0b c0       	rjmp	.+22     	; 0x1de <_Z9fetchDataPh+0x15c>
    
    TCNT1 = 0;
    
    /* Now wait for the first response to finish, low ~80탎 */
    while(!IS_SET(DHT_PORT_IN,DHT_PIN))
    { if (TCNT1 >= 100) return 0; }
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <_Z9fetchDataPh+0x15c>
    
    TCNT1 = 0;
    
    /* Then wait for the second response to finish, high ~80탎 */
    while(IS_SET(DHT_PORT_IN,DHT_PIN))
    { if (TCNT1 >= 100) return 0; }
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <_Z9fetchDataPh+0x15c>
        {
            TCNT1 = 0;
            
            /* First there is always a 50탎 low period */
            while(!IS_SET(DHT_PORT_IN,DHT_PIN))
            { if (TCNT1 >= 70) return 0; }
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <_Z9fetchDataPh+0x15c>
            TCNT1 = 0;
            
            /* Then the data signal is sent. 26 to 28탎 (ideally)
             indicate a low bit, and around 70탎 a high bit */
            while(IS_SET(DHT_PORT_IN,DHT_PIN))
            { if (TCNT1 >= 90) return 0; }
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <_Z9fetchDataPh+0x15c>
            { CLEAR_BIT(data[i],j); }
            
            else if (cnt >= 60 && cnt <= 80)
            { SET_BIT(data[i],j); }
            
            else return 0;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	01 c0       	rjmp	.+2      	; 0x1de <_Z9fetchDataPh+0x15c>
    
    /********************* Sensor communication end *********************/
    
    check = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
    
    if (check != data[4]) return 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
    
    for(i = 0; i < 4; ++i)
    { arr[i] = data[i]; }
    
    return 1;
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	ef 90       	pop	r14
 1f4:	df 90       	pop	r13
 1f6:	cf 90       	pop	r12
 1f8:	bf 90       	pop	r11
 1fa:	af 90       	pop	r10
 1fc:	9f 90       	pop	r9
 1fe:	8f 90       	pop	r8
 200:	08 95       	ret

00000202 <main>:

#include <avr/io.h>
#include <util/delay.h>
//#include <avr/interrupt.h>
int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	00 d0       	rcall	.+0      	; 0x208 <main+0x6>
 208:	00 d0       	rcall	.+0      	; 0x20a <main+0x8>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
    uint8_t data [4];
    
    int8_t i;
    
    initDHT();
 20e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z7initDHTv>
    
    if(fetchData(data))
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 41 00 	call	0x82	; 0x82 <_Z9fetchDataPh>
 21a:	88 23       	and	r24, r24
 21c:	c9 f0       	breq	.+50     	; 0x250 <main+0x4e>
    {
        for(i = data[2]; i >= 0; --i)
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	88 23       	and	r24, r24
 222:	b4 f0       	brlt	.+44     	; 0x250 <main+0x4e>
        {
            SET_BIT(PORTB,LED);
 224:	c4 9a       	sbi	0x18, 4	; 24
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	30 e7       	ldi	r19, 0x70	; 112
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x2a>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x34>
 236:	00 00       	nop
            _delay_ms(100);
            
            CLEAR_BIT(PORTB,LED);
 238:	c4 98       	cbi	0x18, 4	; 24
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	34 e3       	ldi	r19, 0x34	; 52
 23e:	9c e0       	ldi	r25, 0x0C	; 12
 240:	21 50       	subi	r18, 0x01	; 1
 242:	30 40       	sbci	r19, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x3e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x48>
 24a:	00 00       	nop
 24c:	81 50       	subi	r24, 0x01	; 1
    
    initDHT();
    
    if(fetchData(data))
    {
        for(i = data[2]; i >= 0; --i)
 24e:	52 f7       	brpl	.-44     	; 0x224 <main+0x22>
            _delay_ms(500);
        }
    }

    return 0;
}
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
